#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon for an attached Thermotek T257P chiller"""

import argparse
import datetime
import threading
import time
from astropy.time import Time
import astropy.units as u
import Pyro4
import serial
from rockit.common import log
from rockit.common.helpers import pyro_client_matches
from rockit.chiller import Config, ChillerMode, ChillerStatus, CommandStatus


class TTKCommand:
    ReadStatus = 1
    ReadSetpoint = 3
    ReadTemperature = 4
    ReadAmbient = 8
    ReadTECLevel = 13
    SetStatus = 15

class ChillerDaemon:
    """Daemon class that wraps the RS232 interface"""
    def __init__(self, config):
        self._config = config
        self._lock = threading.Lock()
        self._loop_condition = threading.Condition()
        self._running = True
        self._port = None
        self._port_error = False

        self._mode = ChillerMode.Automatic
        self._request_timestamp = Time('2000-01-01')
        self._request_enabled = False

        self._status = {
            'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
            'status': ChillerStatus.Disabled,
        }

        runloop = threading.Thread(target=self.run)
        runloop.daemon = True
        runloop.start()

    def send_message(self, command_id, data=''):
        message = f'.01{command_id:02d}00000000{data}'
        chk = 0
        for c in message:
            chk += ord(c)
        message += f'{chk&0xFF:02X}\r'
        self._port.write(message.encode('ascii'))

    def read_response(self):
        message = self._port.read_until(b'\r')
        if not message:
            raise TimeoutError()

        if message[5] != 48:
            raise Exception(f'Chiller returned error: {message}')

        return message[14:-3]

    def run(self):
        """Main run loop"""
        while self._running:
            # Initial setup
            try:
                self._port = serial.Serial(self._config.serial_port, self._config.serial_baud,
                                           timeout=self._config.serial_timeout, xonxoff=True)

                # Make sure the chiller responds
                self.send_message(TTKCommand.ReadStatus)
                self.read_response()
                time.sleep(1)

                print('Connected to', self._config.serial_port)
                prefix = 'Restored' if self._port_error else 'Established'
                log.info(self._config.log_name, prefix + ' serial connection to chiller')
                self._port_error = False
            except Exception as exception:
                print(exception)
                print('Will retry in 10 seconds...')
                if not self._port_error:
                    log.error(self._config.log_name, 'Failed to connect to chiller')
                with self._lock:
                    self._status = {
                        'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                        'status': ChillerStatus.Disabled,
                    }
                self._port_error = True

                time.sleep(10.)
                continue

            try:
                # Flush any stale state
                self._port.flushInput()
                self._port.flushOutput()
                # Main run loop
                while self._running:
                    self.send_message(TTKCommand.ReadStatus)
                    status = self.read_response()
                    pump_enabled = chr(status[1]) == '1'
                    time.sleep(1)
                    self.send_message(TTKCommand.ReadSetpoint)
                    setpoint = int(self.read_response()) / 10.0
                    time.sleep(1)
                    self.send_message(TTKCommand.ReadTemperature)
                    temperature = int(self.read_response()) / 10.0
                    time.sleep(1)
                    self.send_message(TTKCommand.ReadAmbient)
                    ambient = int(self.read_response()) / 10.0
                    time.sleep(1)
                    self.send_message(TTKCommand.ReadTECLevel)
                    tec_status = self.read_response()
                    tec_power = int(tec_status[:3])
                    tec_mode = chr(tec_status[-1])

                    if tec_mode == 'C' and pump_enabled:
                        status = ChillerStatus.Cooling
                    elif tec_mode == 'H' and pump_enabled:
                        status = ChillerStatus.Heating
                    else:
                        status = ChillerStatus.Idle

                    with self._loop_condition:
                        if self._mode == ChillerMode.Automatic:
                            request_enabled = self._request_timestamp > Time.now() - 1 * u.minute or ambient < 5.0
                        else:
                            request_enabled = self._request_enabled

                        if request_enabled and status == ChillerStatus.Idle:
                            self.send_message(TTKCommand.SetStatus, '1')
                            log.info(self._config.log_name, 'Enabling chiller')
                            continue

                        if not request_enabled and status != ChillerStatus.Idle:
                            self.send_message(TTKCommand.SetStatus, '0')
                            log.info(self._config.log_name, 'Disabling chiller')
                            continue

                        with self._lock:
                            self._status = {
                                'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                                'status': status,
                                'setpoint': setpoint,
                                'temperature': temperature,
                                'ambient': ambient,
                                'tec_power': tec_power
                            }
                        self._loop_condition.wait(self._config.query_delay)

            except Exception as exception:
                with self._lock:
                    self._status = {
                        'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                        'status': ChillerStatus.Disabled,
                    }

                self._port.close()
                print(exception)
                print('Will retry in 10 seconds...')
                if not self._port_error:
                    log.error(self._config.log_name, 'Lost serial connection to controller')
                self._port_error = True
                time.sleep(10.)

    @Pyro4.expose
    def report_status(self):
        """Returns a dictionary containing the current state"""
        with self._lock:
            status = {}
            status.update(self._status)
            status['mode'] = self._mode
            return status

    @Pyro4.expose
    def set_mode(self, mode):
        """Switch the chiller between manual and automatic control"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with self._lock:
            self._mode = mode

        with self._loop_condition:
            self._loop_condition.notify_all()

        return CommandStatus.Succeeded

    @Pyro4.expose
    def set_enabled(self, enabled):
        """Enable or disable the chiller when in manual mode"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if self._mode != ChillerMode.Manual:
            return CommandStatus.ModeIsAutomatic

        with self._lock:
            self._request_enabled = enabled

        with self._loop_condition:
            self._loop_condition.notify_all()

        return CommandStatus.Succeeded

    @Pyro4.expose
    def notify_camera_cooling_active(self):
        """
        Called regularly by the cameras daemons to notify that their cooling is active,
        and requires the chilling to be running. The chiller will disable itself (in automatic mode)
        once 1 minute has passed without any notifications.
        """
        if not pyro_client_matches(self._config.camera_ips):
            return

        if self._mode != ChillerMode.Automatic:
            return

        with self._lock:
            self._request_timestamp = Time.now()

        with self._loop_condition:
            self._loop_condition.notify_all()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Chiller Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()

    c = Config(args.config)
    c.daemon.launch(ChillerDaemon(c))
